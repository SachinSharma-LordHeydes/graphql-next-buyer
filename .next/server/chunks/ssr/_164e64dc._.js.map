{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///D:/projects/dai/buyer/client/user/user.queries.ts"],"sourcesContent":["import gql from \"graphql-tag\";\n\nexport const GET_USER_PROFILE_DETAILS = gql`\n  query GetUserProfileDetails {\n    getUserProfileDetails {\n      id\n      firstName\n      email\n      lastName\n      phone\n    }\n  }\n`;\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,2BAA2B,8IAAA,CAAA,UAAG,CAAC;;;;;;;;;;AAU5C,CAAC","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///D:/projects/dai/buyer/app/%28main%29/account/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { GET_USER_PROFILE_DETAILS } from \"@/client/user/user.queries\";\nimport { useQuery } from \"@apollo/client\";\nimport { useState } from \"react\";\ninterface UserProfile {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  phone: string | null;\n}\n\ninterface Address {\n  id: string;\n  type: \"SHIPPING\" | \"BILLING\" | \"BUSINESS\" | \"WAREHOUSE\";\n  label: string | null;\n  line1: string;\n  line2: string | null;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n  phone: string | null;\n  isDefault: boolean;\n}\n\ninterface Order {\n  id: string;\n  orderNumber: string;\n  status:\n    | \"PENDING\"\n    | \"CONFIRMED\"\n    | \"PROCESSING\"\n    | \"SHIPPED\"\n    | \"DELIVERED\"\n    | \"CANCELLED\"\n    | \"RETURNED\";\n  total: number;\n  createdAt: string;\n}\n\nconst mockUser: UserProfile = {\n  id: \"1\",\n  email: \"john.doe@example.com\",\n  firstName: \"John\",\n  lastName: \"Doe\",\n  phone: \"+1234567890\",\n};\n\nconst mockAddresses: Address[] = [\n  // ... (as in original)\n];\n\nconst mockOrders: Order[] = [\n  // ... (as in original)\n];\n\nexport default function AccountPage() {\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const [user, setUser] = useState(mockUser);\n  const [addresses, setAddresses] = useState(mockAddresses);\n  const [orders] = useState(mockOrders);\n\n  const { data: userProfileDetails, loading, error } = useQuery(GET_USER_PROFILE_DETAILS);\n  if (loading) console.log(\"Loading user profile\");\n  if (error) console.log(\"User profile error\", error);\n  console.log(\"userProfileDetails-->\", userProfileDetails);\n\n  // Render the active section based on tab\n  const renderActiveSection = () => {\n    switch (activeTab) {\n      case \"profile\":\n        return <ProfileSection user={user} setUser={setUser} />;\n      case \"addresses\":\n        return <AddressesSection addresses={addresses} setAddresses={setAddresses} />;\n      case \"orders\":\n        return <OrdersSection orders={orders} />;\n      case \"wishlist\":\n        return <WishlistSection />;\n      case \"payment\":\n        return <PaymentMethodsSection />;\n      case \"notifications\":\n        return <NotificationsSection />;\n      case \"security\":\n        return <SecuritySection />;\n      case \"settings\":\n        return <SettingsSection />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          <SidebarNav\n            user={user}\n            activeTab={activeTab}\n            setActiveTab={setActiveTab}\n          />\n          <div className=\"flex-1\">{renderActiveSection()}</div>\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AA0CA,MAAM,WAAwB;IAC5B,IAAI;IACJ,OAAO;IACP,WAAW;IACX,UAAU;IACV,OAAO;AACT;AAEA,MAAM,gBAA2B,EAEhC;AAED,MAAM,aAAsB,EAE3B;AAEc,SAAS;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE1B,MAAM,EAAE,MAAM,kBAAkB,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE,iIAAA,CAAA,2BAAwB;IACtF,IAAI,SAAS,QAAQ,GAAG,CAAC;IACzB,IAAI,OAAO,QAAQ,GAAG,CAAC,sBAAsB;IAC7C,QAAQ,GAAG,CAAC,yBAAyB;IAErC,yCAAyC;IACzC,MAAM,sBAAsB;QAC1B,OAAQ;YACN,KAAK;gBACH,qBAAO,8OAAC;oBAAe,MAAM;oBAAM,SAAS;;;;;;YAC9C,KAAK;gBACH,qBAAO,8OAAC;oBAAiB,WAAW;oBAAW,cAAc;;;;;;YAC/D,KAAK;gBACH,qBAAO,8OAAC;oBAAc,QAAQ;;;;;;YAChC,KAAK;gBACH,qBAAO,8OAAC;;;;;YACV,KAAK;gBACH,qBAAO,8OAAC;;;;;YACV,KAAK;gBACH,qBAAO,8OAAC;;;;;YACV,KAAK;gBACH,qBAAO,8OAAC;;;;;YACV,KAAK;gBACH,qBAAO,8OAAC;;;;;YACV;gBACE,OAAO;QACX;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBACC,MAAM;wBACN,WAAW;wBACX,cAAc;;;;;;kCAEhB,8OAAC;wBAAI,WAAU;kCAAU;;;;;;;;;;;;;;;;;;;;;;AAKnC","debugId":null}}]
}