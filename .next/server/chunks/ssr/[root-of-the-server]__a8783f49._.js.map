{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///D:/projects/dai/buyer/lib/apollo-provider.tsx"],"sourcesContent":["'use client';\n\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { useAuth } from '@clerk/nextjs';\nimport { useMemo } from 'react';\n\nconst httpLink = createHttpLink({\n  uri: '/api/graphql',\n});\n\nfunction ApolloWrapper({ children }: { children: React.ReactNode }) {\n  const { getToken } = useAuth();\n\n  const client = useMemo(() => {\n    const authLink = setContext(async (_, { headers }) => {\n      const token = await getToken();\n      return {\n        headers: {\n          ...headers,\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      };\n    });\n\n    return new ApolloClient({\n      link: authLink.concat(httpLink),\n      cache: new InMemoryCache({\n        typePolicies: {\n          Query: {\n            fields: {\n              getProducts: {\n                merge: false,\n              },\n              getMyCart: {\n                merge: false,\n              },\n              categories: {\n                merge: false,\n              },\n            },\n          },\n          Product: {\n            fields: {\n              reviews: {\n                merge: false,\n              },\n              images: {\n                merge: false,\n              },\n              variants: {\n                merge: false,\n              },\n            },\n          },\n        },\n      }),\n      defaultOptions: {\n        watchQuery: {\n          errorPolicy: 'all',\n          notifyOnNetworkStatusChange: false,\n          fetchPolicy: 'cache-first', // Default to cache-first for better performance\n        },\n        query: {\n          errorPolicy: 'all',\n          fetchPolicy: 'cache-first',\n        },\n      },\n    });\n  }, [getToken]);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n\nexport default ApolloWrapper;\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;;;;;;AAOA,MAAM,WAAW,CAAA,GAAA,oKAAA,CAAA,iBAAc,AAAD,EAAE;IAC9B,KAAK;AACP;AAEA,SAAS,cAAc,EAAE,QAAQ,EAAiC;IAChE,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,kPAAA,CAAA,UAAO,AAAD;IAE3B,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACrB,MAAM,WAAW,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAD,EAAE,OAAO,GAAG,EAAE,OAAO,EAAE;YAC/C,MAAM,QAAQ,MAAM;YACpB,OAAO;gBACL,SAAS;oBACP,GAAG,OAAO;oBACV,eAAe,QAAQ,CAAC,OAAO,EAAE,OAAO,GAAG;gBAC7C;YACF;QACF;QAEA,OAAO,IAAI,0KAAA,CAAA,eAAY,CAAC;YACtB,MAAM,SAAS,MAAM,CAAC;YACtB,OAAO,IAAI,wKAAA,CAAA,gBAAa,CAAC;gBACvB,cAAc;oBACZ,OAAO;wBACL,QAAQ;4BACN,aAAa;gCACX,OAAO;4BACT;4BACA,WAAW;gCACT,OAAO;4BACT;4BACA,YAAY;gCACV,OAAO;4BACT;wBACF;oBACF;oBACA,SAAS;wBACP,QAAQ;4BACN,SAAS;gCACP,OAAO;4BACT;4BACA,QAAQ;gCACN,OAAO;4BACT;4BACA,UAAU;gCACR,OAAO;4BACT;wBACF;oBACF;gBACF;YACF;YACA,gBAAgB;gBACd,YAAY;oBACV,aAAa;oBACb,6BAA6B;oBAC7B,aAAa;gBACf;gBACA,OAAO;oBACL,aAAa;oBACb,aAAa;gBACf;YACF;QACF;IACF,GAAG;QAAC;KAAS;IAEb,qBAAO,8OAAC,wKAAA,CAAA,iBAAc;QAAC,QAAQ;kBAAS;;;;;;AAC1C;uCAEe","debugId":null}}]
}