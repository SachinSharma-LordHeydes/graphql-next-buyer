{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/projects/dai/buyer/lib/apollo-provider.tsx"],"sourcesContent":["'use client';\n\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { useAuth } from '@clerk/nextjs';\nimport { useMemo } from 'react';\n\nconst httpLink = createHttpLink({\n  uri: '/api/graphql',\n});\n\nfunction ApolloWrapper({ children }: { children: React.ReactNode }) {\n  const { getToken } = useAuth();\n\n  const client = useMemo(() => {\n    const authLink = setContext(async (_, { headers }) => {\n      const token = await getToken();\n      return {\n        headers: {\n          ...headers,\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      };\n    });\n\n    return new ApolloClient({\n      link: authLink.concat(httpLink),\n      cache: new InMemoryCache({\n        typePolicies: {\n          Query: {\n            fields: {\n              getProducts: {\n                merge: false,\n              },\n              getMyCart: {\n                merge: false,\n              },\n              categories: {\n                merge: false,\n              },\n            },\n          },\n          Product: {\n            fields: {\n              reviews: {\n                merge: false,\n              },\n              images: {\n                merge: false,\n              },\n              variants: {\n                merge: false,\n              },\n            },\n          },\n        },\n      }),\n      defaultOptions: {\n        watchQuery: {\n          errorPolicy: 'all',\n          notifyOnNetworkStatusChange: false,\n          fetchPolicy: 'cache-first', // Default to cache-first for better performance\n        },\n        query: {\n          errorPolicy: 'all',\n          fetchPolicy: 'cache-first',\n        },\n      },\n    });\n  }, [getToken]);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n\nexport default ApolloWrapper;\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AALA;;;;;AAOA,MAAM,WAAW,CAAA,GAAA,uKAAA,CAAA,iBAAc,AAAD,EAAE;IAC9B,KAAK;AACP;AAEA,SAAS,cAAc,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;;IACrB,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,qPAAA,CAAA,UAAO,AAAD;IAE3B,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;yCAAE;YACrB,MAAM,WAAW,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD;0DAAE,OAAO;wBAAG,EAAE,OAAO,EAAE;oBAC/C,MAAM,QAAQ,MAAM;oBACpB,OAAO;wBACL,SAAS;4BACP,GAAG,OAAO;4BACV,eAAe,QAAQ,AAAC,UAAe,OAAN,SAAU;wBAC7C;oBACF;gBACF;;YAEA,OAAO,IAAI,6KAAA,CAAA,eAAY,CAAC;gBACtB,MAAM,SAAS,MAAM,CAAC;gBACtB,OAAO,IAAI,2KAAA,CAAA,gBAAa,CAAC;oBACvB,cAAc;wBACZ,OAAO;4BACL,QAAQ;gCACN,aAAa;oCACX,OAAO;gCACT;gCACA,WAAW;oCACT,OAAO;gCACT;gCACA,YAAY;oCACV,OAAO;gCACT;4BACF;wBACF;wBACA,SAAS;4BACP,QAAQ;gCACN,SAAS;oCACP,OAAO;gCACT;gCACA,QAAQ;oCACN,OAAO;gCACT;gCACA,UAAU;oCACR,OAAO;gCACT;4BACF;wBACF;oBACF;gBACF;gBACA,gBAAgB;oBACd,YAAY;wBACV,aAAa;wBACb,6BAA6B;wBAC7B,aAAa;oBACf;oBACA,OAAO;wBACL,aAAa;wBACb,aAAa;oBACf;gBACF;YACF;QACF;wCAAG;QAAC;KAAS;IAEb,qBAAO,6LAAC,2KAAA,CAAA,iBAAc;QAAC,QAAQ;kBAAS;;;;;;AAC1C;GA7DS;;QACc,qPAAA,CAAA,UAAO;;;KADrB;uCA+DM","debugId":null}}]
}